# Fibonacci Producer - Publishes Fibonacci computation jobs
# This workflow publishes async Fibonacci jobs and exits immediately (non-blocking)

name: Fibonacci Producer Pipeline

on:
  workflow_dispatch:
    inputs:
      fibonacci_type:
        description: 'Type of Fibonacci computation'
        required: true
        default: 'standard'
        type: choice
        options:
          - standard
          - optimized
          - parallel
          - stress_test
      iterations:
        description: 'Number of Fibonacci iterations'
        required: false
        default: '100'
      batch_size:
        description: 'Batch size for processing'
        required: false
        default: '10'
      priority:
        description: 'Job priority'
        required: false
        default: 'normal'
        type: choice
        options:
          - low
          - normal
          - high
          - urgent
      callback_enabled:
        description: 'Enable GitHub callback when complete'
        required: false
        default: true
        type: boolean

env:
  PRODUCER_ACTION_ID: fibonacci-producer-${{ github.run_id }}-${{ github.run_attempt }}

jobs:
  # ================================
  # FIBONACCI JOB PUBLISHER
  # ================================
  publish-fibonacci-job:
    runs-on: self-hosted
    outputs:
      action-id: ${{ steps.publish.outputs.action-id }}
      correlation-id: ${{ steps.publish.outputs.correlation-id }}
      estimated-duration: ${{ steps.publish.outputs.estimated-duration }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Calculate Fibonacci Job Metadata
        id: metadata
        run: |
          ITERATIONS=${{ github.event.inputs.iterations }}
          FIBONACCI_TYPE="${{ github.event.inputs.fibonacci_type }}"
          BATCH_SIZE=${{ github.event.inputs.batch_size }}
          
          echo "🧮 Calculating Fibonacci job metadata..."
          echo "  Type: $FIBONACCI_TYPE"
          echo "  Iterations: $ITERATIONS"
          echo "  Batch Size: $BATCH_SIZE"
          
          # Estimate duration based on Fibonacci computation type
          case "$FIBONACCI_TYPE" in
            "standard")
              # Standard Fibonacci: ~0.1 seconds per iteration
              ESTIMATED_SECONDS=$(( ITERATIONS / 10 ))
              ;;
            "optimized")
              # Optimized Fibonacci: ~0.05 seconds per iteration  
              ESTIMATED_SECONDS=$(( ITERATIONS / 20 ))
              ;;
            "parallel")
              # Parallel Fibonacci: ~0.02 seconds per iteration
              ESTIMATED_SECONDS=$(( ITERATIONS / 50 ))
              ;;
            "stress_test")
              # Stress test: ~0.5 seconds per iteration
              ESTIMATED_SECONDS=$(( ITERATIONS / 2 ))
              ;;
            *)
              ESTIMATED_SECONDS=$(( ITERATIONS / 10 ))
              ;;
          esac
          
          # Minimum 5 seconds for demo purposes
          [[ $ESTIMATED_SECONDS -lt 5 ]] && ESTIMATED_SECONDS=5
          
          # Format duration nicely
          if [[ $ESTIMATED_SECONDS -lt 60 ]]; then
            DURATION_STR="${ESTIMATED_SECONDS}s"
          elif [[ $ESTIMATED_SECONDS -lt 3600 ]]; then
            MINUTES=$(( ESTIMATED_SECONDS / 60 ))
            SECONDS=$(( ESTIMATED_SECONDS % 60 ))
            DURATION_STR="${MINUTES}m ${SECONDS}s"
          else
            HOURS=$(( ESTIMATED_SECONDS / 3600 ))
            MINUTES=$(( (ESTIMATED_SECONDS % 3600) / 60 ))
            DURATION_STR="${HOURS}h ${MINUTES}m"
          fi
          
          echo "estimated-duration=$DURATION_STR" >> $GITHUB_OUTPUT
          echo "estimated-seconds=$ESTIMATED_SECONDS" >> $GITHUB_OUTPUT
          
          echo "⏱️  Estimated processing time: $DURATION_STR"

      - name: Generate Correlation Metadata
        id: correlation
        run: |
          CORRELATION_ID="fib-corr-$(date +%s)-${{ github.run_id }}"
          CALLBACK_ENDPOINT=""
          
          # Generate callback webhook if enabled
          if [[ "${{ github.event.inputs.callback_enabled }}" == "true" ]]; then
            CALLBACK_ENDPOINT="https://api.github.com/repos/${{ github.repository }}/dispatches"
          fi
          
          echo "correlation-id=$CORRELATION_ID" >> $GITHUB_OUTPUT
          echo "callback-endpoint=$CALLBACK_ENDPOINT" >> $GITHUB_OUTPUT
          
          echo "📋 Correlation Metadata:"
          echo "  Correlation ID: $CORRELATION_ID"
          echo "  Callback: $([[ -n "$CALLBACK_ENDPOINT" ]] && echo "Enabled" || echo "Disabled")"

      - name: Publish Fibonacci Computation Job
        id: publish
        run: |
          ACTION_ID="${{ env.PRODUCER_ACTION_ID }}"
          CORRELATION_ID="${{ steps.correlation.outputs.correlation-id }}"
          
          # Create Fibonacci job payload
          FIBONACCI_PAYLOAD=$(jq -n \
            --arg fibonacci_type "${{ github.event.inputs.fibonacci_type }}" \
            --arg iterations "${{ github.event.inputs.iterations }}" \
            --arg batch_size "${{ github.event.inputs.batch_size }}" \
            --arg priority "${{ github.event.inputs.priority }}" \
            --arg correlation_id "$CORRELATION_ID" \
            --arg callback_enabled "${{ github.event.inputs.callback_enabled }}" \
            --arg callback_endpoint "${{ steps.correlation.outputs.callback-endpoint }}" \
            --arg repository "${{ github.repository }}" \
            --arg workflow_run_id "${{ github.run_id }}" \
            --arg actor "${{ github.actor }}" \
            --arg ref "${{ github.ref }}" \
            --arg sha "${{ github.sha }}" \
            --arg timestamp "$(date -Iseconds)" \
            '{
              operation: "fibonacci",
              fibonacci_type: $fibonacci_type,
              iterations: ($iterations | tonumber),
              batch_size: ($batch_size | tonumber),
              priority: $priority,
              correlation_id: $correlation_id,
              callback_enabled: ($callback_enabled | test("true")),
              callback_endpoint: $callback_endpoint,
              github_context: {
                repository: $repository,
                workflow_run_id: $workflow_run_id,
                actor: $actor,
                ref: $ref,
                sha: $sha,
                triggered_at: $timestamp
              }
            }')
          
          echo "action-id=$ACTION_ID" >> $GITHUB_OUTPUT
          echo "correlation-id=$CORRELATION_ID" >> $GITHUB_OUTPUT
          echo "estimated-duration=${{ steps.metadata.outputs.estimated-duration }}" >> $GITHUB_OUTPUT
          
          echo "📤 Publishing Fibonacci computation job..."
          echo "🆔 Action ID: $ACTION_ID"
          echo "🧮 Fibonacci Type: ${{ github.event.inputs.fibonacci_type }}"
          echo "🔢 Iterations: ${{ github.event.inputs.iterations }}"
          echo "📦 Batch Size: ${{ github.event.inputs.batch_size }}"
          echo "📋 Payload:"
          echo "$FIBONACCI_PAYLOAD" | jq '.'
          
          # Publish to Fibonacci computation queue
          EVENT_TYPE="fibonacci-requested"
          ./scripts/pubsub/publisher.sh "$ACTION_ID" "$EVENT_TYPE" "$FIBONACCI_PAYLOAD"
          
          echo "✅ Fibonacci job published successfully!"
          echo "🚀 Background processing will start momentarily..."

      - name: Start Fibonacci Background Processor
        run: |
          ACTION_ID="${{ steps.publish.outputs.action-id }}"
          
          echo "🧮 Starting Fibonacci background processor for: $ACTION_ID"
          echo "📊 Configuration:"
          echo "  Type: ${{ github.event.inputs.fibonacci_type }}"
          echo "  Iterations: ${{ github.event.inputs.iterations }}"
          echo "  Batch Size: ${{ github.event.inputs.batch_size }}"
          
          # Start Fibonacci subscriber
          nohup node ./scripts/pubsub/math-subscriber.js "$ACTION_ID" \
            > "/tmp/fibonacci-subscriber-$ACTION_ID.log" 2>&1 &
          
          SUBSCRIBER_PID=$!
          echo $SUBSCRIBER_PID > "/tmp/fibonacci-subscriber-$ACTION_ID.pid"
          
          echo "✅ Fibonacci subscriber started with PID: $SUBSCRIBER_PID"
          echo "📄 Logs: /tmp/fibonacci-subscriber-$ACTION_ID.log"
          echo "🔄 Processing will continue independently in background..."

      - name: Register Completion Monitor  
        if: github.event.inputs.callback_enabled == 'true'
        run: |
          ACTION_ID="${{ steps.publish.outputs.action-id }}"
          CORRELATION_ID="${{ steps.publish.outputs.correlation-id }}"
          
          echo "👁️  Registering completion monitor for callback..."
          
          # Start completion monitor that will trigger repository_dispatch
          nohup ./scripts/pubsub/completion-monitor.sh \
            "$ACTION_ID" \
            "$CORRELATION_ID" \
            "${{ github.repository }}" \
            "${{ secrets.GITHUB_TOKEN }}" \
            > "/tmp/completion-monitor-$ACTION_ID.log" 2>&1 &
          
          echo $! > "/tmp/completion-monitor-$ACTION_ID.pid"
          echo "✅ Completion monitor registered with PID: $(cat /tmp/completion-monitor-$ACTION_ID.pid)"

      - name: Producer Summary
        run: |
          ACTION_ID="${{ steps.publish.outputs.action-id }}"
          CORRELATION_ID="${{ steps.publish.outputs.correlation-id }}"
          ESTIMATED_DURATION="${{ steps.publish.outputs.estimated-duration }}"
          
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # 🧮 Fibonacci Job Published Successfully
          
          ## 📋 Job Details
          
          | Attribute | Value |
          |-----------|-------|
          | **Action ID** | \`$ACTION_ID\` |
          | **Correlation ID** | \`$CORRELATION_ID\` |
          | **Fibonacci Type** | \`${{ github.event.inputs.fibonacci_type }}\` |
          | **Iterations** | \`${{ github.event.inputs.iterations }}\` |
          | **Batch Size** | \`${{ github.event.inputs.batch_size }}\` |
          | **Priority** | \`${{ github.event.inputs.priority }}\` |
          | **Estimated Duration** | \`$ESTIMATED_DURATION\` |
          | **Callback Enabled** | \`${{ github.event.inputs.callback_enabled }}\` |
          
          ## 🔄 What Happens Next
          
          1. 🧮 **Fibonacci Processing Started**: Computing ${{ github.event.inputs.iterations }} Fibonacci numbers (${{ github.event.inputs.fibonacci_type }} algorithm)
          2. 📊 **Outputs Being Streamed**: Real-time results indexed to multiple datastores  
          3. $([[ "${{ github.event.inputs.callback_enabled }}" == "true" ]] && echo "🔔 **GitHub Callback**: Consumer workflow will be triggered automatically when complete" || echo "⏳ **Manual Check**: Use consumer workflow to check results later")
          
          ## 🔍 Monitor Fibonacci Progress
          
          \`\`\`bash
          # Check current status
          ./scripts/pubsub/output-query-api.sh get-status "$ACTION_ID" "math"
          
          # Stream computation logs in real-time
          ./scripts/pubsub/output-query-api.sh stream-logs "$ACTION_ID" "math"
          
          # Check background Fibonacci processor logs
          tail -f /tmp/fibonacci-subscriber-$ACTION_ID.log
          \`\`\`
          
          ## 🎯 Next Step
          
          This **producer workflow is now complete and non-blocking**! 🚀
          
          The Fibonacci computation continues independently in the background.
          $([[ "${{ github.event.inputs.callback_enabled }}" == "true" ]] && echo "The **Async Consumer** workflow will be automatically triggered when all computations finish." || echo "Manually trigger the **Async Consumer** workflow later to retrieve Fibonacci results.")
          
          **Producer job finished in seconds, processing continues asynchronously! 🎉**
          EOF
          
          echo "🎉 Fibonacci producer workflow complete!"

  # ================================
  # DEMONSTRATE NON-BLOCKING
  # ================================
  non-blocking-demo:
    needs: publish-fibonacci-job
    runs-on: self-hosted
    steps:
      - name: Show Non-Blocking Behavior
        run: |
          echo "🚀 DEMONSTRATING NON-BLOCKING EXECUTION"
          echo "======================================"
          echo ""
          echo "🧮 Fibonacci job published: ${{ needs.publish-fibonacci-job.outputs.action-id }}"
          echo "📊 Estimated background duration: ${{ needs.publish-fibonacci-job.outputs.estimated-duration }}"
          echo "⏱️  Producer workflow time: $(date -Iseconds)"
          echo ""
          echo "✅ Key Achievement: This workflow completed in seconds while"
          echo "   Fibonacci computation continues running in the background!"
          echo ""
          echo "🔄 Background processing will:"
          echo "  - Compute ${{ github.event.inputs.iterations }} Fibonacci numbers"
          echo "  - Stream results to indexed datastores"
          echo "  - Trigger consumer workflow when complete"
          echo ""
          echo "🎯 Result: GitHub Actions is now NON-BLOCKING! 🎉"