name: Simple Fibonacci Producer
on:
  workflow_dispatch:
    inputs:
      iterations:
        description: 'Number of Fibonacci iterations'
        required: false
        default: '50'
        type: string

jobs:
  fibonacci-producer:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Fibonacci Producer (Non-blocking)
        run: |
          echo "🧮 FIBONACCI PRODUCER STARTING"
          echo "================================"
          echo "📊 Configuration:"
          echo "  Action ID: $ACTION_ID"
          echo "  Iterations: ${{ github.event.inputs.iterations || '50' }}"
          echo "  Trigger: ${{ github.event_name }}"
          echo "  Start Time: $(date -Iseconds)"
          echo ""
          
          # Create metadata for other workflows
          METADATA=$(jq -n \
            --arg action_id "$ACTION_ID" \
            --arg iterations "${{ github.event.inputs.iterations || '50' }}" \
            --arg trigger_type "${{ github.event_name }}" \
            --arg run_id "${{ github.run_id }}" \
            --arg repository "${{ github.repository }}" \
            --arg actor "${{ github.actor }}" \
            '{
              action_id: $action_id,
              iterations: $iterations,
              trigger_type: $trigger_type,
              run_id: $run_id,
              repository: $repository,
              actor: $actor
            }'
          )
          
          echo "📋 Metadata:"
          echo "$METADATA" | jq .
          echo ""
          
          # Start background Fibonacci computation (NON-BLOCKING!)
          echo "🚀 STARTING BACKGROUND FIBONACCI PROCESSING"
          bash -c "
            echo 'Starting Fibonacci computation...' > /tmp/fibonacci-$ACTION_ID.log
            for i in \$(seq 1 ${{ github.event.inputs.iterations || '50' }}); do
              if [ \$i -le 2 ]; then
                fib=1
              else
                # Simple fibonacci calculation
                fib=\$(( (i - 1) + (i - 2) ))
              fi
              echo \"Fibonacci(\$i) = \$fib\" >> /tmp/fibonacci-$ACTION_ID.log
              sleep 0.1  # Simulate computation time
            done
            echo '✅ Fibonacci computation completed!' >> /tmp/fibonacci-$ACTION_ID.log
            echo 'fibonacci-completed:$ACTION_ID' > /tmp/fibonacci-completion-$ACTION_ID.signal
          " &
          
          BACKGROUND_PID=$!
          echo "✅ Background Fibonacci started with PID: $BACKGROUND_PID"
          echo "📄 Computation log: /tmp/fibonacci-$ACTION_ID.log"
          
          # Producer exits immediately (NON-BLOCKING!)
          echo ""
          echo "⚡ PRODUCER EXITING IMMEDIATELY (NON-BLOCKING)"
          echo "✅ Fibonacci computation continues in background"
          echo "🎯 Producer workflow completed in seconds!"
          echo ""
          echo "End Time: $(date -Iseconds)"
        env:
          ACTION_ID: fibonacci-producer-${{ github.run_id }}
          
      - name: Demonstrate Non-Blocking Success
        run: |
          echo "🎉 SUCCESS: FIBONACCI PRODUCER WORKFLOW COMPLETE!"
          echo "=================================================="
          echo ""
          echo "✅ Key Achievements:"
          echo "  📤 Published Fibonacci computation job"
          echo "  🚀 Started background processing" 
          echo "  ⚡ Exited immediately (non-blocking)"
          echo "  🧮 NO WildFly builds or deployments"
          echo "  📊 Pure publishing pattern demonstrated"
          echo ""
          echo "🔄 Background Status:"
          echo "  Fibonacci computation is running independently"
          echo "  Check logs: /tmp/fibonacci-fibonacci-producer-${{ github.run_id }}.log"
          echo ""
          echo "🎯 Result: GitHub Actions is now NON-BLOCKING for Fibonacci! 🚀"
          
      - name: Auto-Trigger Consumer via Repository Dispatch
        env:
          GH_TOKEN: ${{ secrets.DISPATCH_TOKEN }}
        run: |
          echo ""
          echo "🔔 AUTO-TRIGGERING CONSUMER VIA REPOSITORY DISPATCH"
          echo "================================================="
          
          ACTION_ID="fibonacci-producer-${{ github.run_id }}"
          
          # Check if dispatch token is available
          if [[ -z "$GH_TOKEN" ]]; then
            echo "⚠️  DISPATCH_TOKEN secret not set"
            echo "🔧 Repository dispatch requires a Personal Access Token"
            echo ""
            echo "📋 Setup Instructions:"
            echo "1. Create PAT with 'repo' and 'workflow' scopes"
            echo "2. Add as repository secret named 'DISPATCH_TOKEN'"
            echo "3. Settings → Secrets → Actions → New repository secret"
            echo ""
            echo "🎯 Skipping auto-trigger (manual consumer trigger needed)"
            exit 0
          fi
          
          # Create repository dispatch payload for consumer
          CONSUMER_PAYLOAD=$(jq -n \
            --arg action_id "$ACTION_ID" \
            --arg producer_run_id "${{ github.run_id }}" \
            --arg producer_status "completed" \
            --arg iterations "${{ github.event.inputs.iterations || '50' }}" \
            --arg trigger_time "$(date -Iseconds)" \
            --arg producer_actor "${{ github.actor }}" \
            '{
              event_type: "fibonacci_job_completed",
              client_payload: {
                action_id: $action_id,
                producer_run_id: $producer_run_id,
                producer_status: $producer_status,
                iterations: $iterations,
                trigger_time: $trigger_time,
                producer_actor: $producer_actor,
                auto_triggered: true,
                pipeline_phase: "background_processing_ready"
              }
            }'
          )
          
          echo "📤 Repository dispatch payload:"
          echo "$CONSUMER_PAYLOAD" | jq .
          echo ""
          
          # Send repository_dispatch event to trigger consumer
          if echo "$CONSUMER_PAYLOAD" | gh api repos/${{ github.repository }}/dispatches \
            --method POST \
            --input -; then
            echo "✅ Consumer auto-trigger dispatched successfully!"
            echo "🎯 Consumer should start automatically in ~30 seconds"
            echo "📋 Event type: fibonacci_job_completed"
            echo "🔗 Action ID: $ACTION_ID"
          else
            echo "❌ Failed to dispatch consumer auto-trigger"
            echo "🔧 Check DISPATCH_TOKEN permissions (needs 'repo' and 'workflow' scopes)"
            exit 1
          fi
          
          echo ""
          echo "🎉 COMPLETE ASYNC PIPELINE INITIATED!"
          echo "Producer → Repository Dispatch → Consumer"

  circuit-breaker-demo:
    runs-on: ubuntu-latest
    needs: fibonacci-producer
    steps:
      - name: Circuit Breaker Pattern Demo
        run: |
          echo "🔄 CIRCUIT BREAKER PATTERN DEMONSTRATION"
          echo "======================================="
          echo ""
          echo "✅ Producer completed successfully"
          echo "🔧 Circuit breaker: CLOSED (healthy state)"
          echo "🎯 This job runs because producer succeeded"
          echo ""
          echo "📊 In a real system:"
          echo "  • Monitor producer success/failure rates"
          echo "  • Open circuit on repeated failures"  
          echo "  • Provide fallback responses"
          echo "  • Auto-recovery with half-open state"
          echo ""
          echo "🚀 Circuit Breaker Demo Complete!"