name: Pipeline State Tracker v1.0.0

on:
  repository_dispatch:
    types: [pipeline_state_update, fibonacci_job_completed]
  workflow_dispatch:
    inputs:
      pipeline_id:
        description: 'Pipeline ID to track'
        required: true
        type: string
      state:
        description: 'Pipeline state'
        required: true
        default: 'unknown'
        type: choice
        options:
        - started
        - processing  
        - completed
        - failed
        - unknown
      phase:
        description: 'Pipeline phase'
        required: false
        default: 'general'
        type: string

jobs:
  state-tracker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Parse State Update Event
        id: parse-state
        run: |
          echo "üîç PIPELINE STATE TRACKER"
          echo "========================"
          
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            echo "üìã Repository Dispatch Event:"
            echo "  Event Type: ${{ github.event.action }}"
            echo "  Pipeline ID: ${{ github.event.client_payload.action_id }}"
            echo "  State: ${{ github.event.client_payload.producer_status }}"
            echo "  Phase: ${{ github.event.client_payload.pipeline_phase }}"
            
            PIPELINE_ID="${{ github.event.client_payload.action_id }}"
            STATE="${{ github.event.client_payload.producer_status }}"
            PHASE="${{ github.event.client_payload.pipeline_phase }}"
            
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "üìã Manual State Update:"
            echo "  Pipeline ID: ${{ github.event.inputs.pipeline_id }}"
            echo "  State: ${{ github.event.inputs.state }}"
            echo "  Phase: ${{ github.event.inputs.phase }}"
            
            PIPELINE_ID="${{ github.event.inputs.pipeline_id }}"
            STATE="${{ github.event.inputs.state }}"
            PHASE="${{ github.event.inputs.phase }}"
          else
            echo "‚ùå Unsupported trigger event"
            exit 1
          fi
          
          echo "pipeline-id=$PIPELINE_ID" >> $GITHUB_OUTPUT
          echo "state=$STATE" >> $GITHUB_OUTPUT  
          echo "phase=$PHASE" >> $GITHUB_OUTPUT
          echo ""
          
      - name: Update GitHub Commit Status
        run: |
          echo "üìä UPDATING GITHUB COMMIT STATUS"
          echo "================================"
          
          PIPELINE_ID="${{ steps.parse-state.outputs.pipeline-id }}"
          STATE="${{ steps.parse-state.outputs.state }}"
          PHASE="${{ steps.parse-state.outputs.phase }}"
          
          # Map states to GitHub status
          case "$STATE" in
            "started")
              GITHUB_STATE="pending"
              DESCRIPTION="Pipeline $PIPELINE_ID started"
              ;;
            "processing")
              GITHUB_STATE="pending" 
              DESCRIPTION="Pipeline $PIPELINE_ID processing"
              ;;
            "completed")
              GITHUB_STATE="success"
              DESCRIPTION="Pipeline $PIPELINE_ID completed successfully"
              ;;
            "failed")
              GITHUB_STATE="failure"
              DESCRIPTION="Pipeline $PIPELINE_ID failed"
              ;;
            *)
              GITHUB_STATE="pending"
              DESCRIPTION="Pipeline $PIPELINE_ID state: $STATE"
              ;;
          esac
          
          CONTEXT="async-pipeline/$PHASE"
          TARGET_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          echo "üìã Status Update:"
          echo "  Pipeline ID: $PIPELINE_ID"
          echo "  State: $STATE ‚Üí $GITHUB_STATE"
          echo "  Context: $CONTEXT"
          echo "  Description: $DESCRIPTION"
          
          # Create commit status payload
          STATUS_PAYLOAD=$(jq -n \
            --arg state "$GITHUB_STATE" \
            --arg description "$DESCRIPTION" \
            --arg context "$CONTEXT" \
            --arg target_url "$TARGET_URL" \
            '{
              state: $state,
              description: $description,
              context: $context,
              target_url: $target_url
            }'
          )
          
          echo "üì§ Commit status payload:"
          echo "$STATUS_PAYLOAD" | jq .
          
          # Update commit status
          if echo "$STATUS_PAYLOAD" | gh api repos/${{ github.repository }}/statuses/${{ github.sha }} \
            --method POST \
            --input -; then
            echo "‚úÖ Commit status updated successfully!"
          else
            echo "‚ùå Failed to update commit status"
          fi
          
      - name: Create Pipeline State Issue  
        run: |
          echo "üìã CREATING/UPDATING PIPELINE STATE ISSUE"
          echo "========================================="
          
          PIPELINE_ID="${{ steps.parse-state.outputs.pipeline-id }}"
          STATE="${{ steps.parse-state.outputs.state }}"
          PHASE="${{ steps.parse-state.outputs.phase }}"
          
          ISSUE_TITLE="Pipeline State: $PIPELINE_ID"
          TIMESTAMP=$(date -Iseconds)
          
          # Create issue body with state timeline
          ISSUE_BODY=$(cat <<EOF
          # üîÑ Pipeline State Tracker
          
          **Pipeline ID:** \`$PIPELINE_ID\`  
          **Current State:** **$STATE**  
          **Phase:** \`$PHASE\`  
          **Last Update:** \`$TIMESTAMP\`  
          **Run ID:** [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ## üìä State History
          
          - **$TIMESTAMP** - $STATE ($PHASE)
          
          ## üîó Related Workflows
          
          - [View All Runs](https://github.com/${{ github.repository }}/actions)
          - [Pipeline Monitoring](https://github.com/${{ github.repository }}/actions/workflows/pipeline-monitor-v1.0.0.yml)
          
          ---
          *This issue is automatically managed by the Pipeline State Tracker*
          EOF
          )
          
          echo "üìã Issue details:"
          echo "  Title: $ISSUE_TITLE"
          echo "  Pipeline ID: $PIPELINE_ID"
          echo "  State: $STATE"
          echo ""
          
          # Search for existing issue
          EXISTING_ISSUE=$(gh issue list --search "in:title \"$ISSUE_TITLE\"" --json number --jq '.[0].number // empty')
          
          if [[ -n "$EXISTING_ISSUE" ]]; then
            echo "üìù Updating existing issue #$EXISTING_ISSUE"
            
            # Update existing issue
            if echo "$ISSUE_BODY" | gh issue edit "$EXISTING_ISSUE" \
              --title "$ISSUE_TITLE" \
              --body-file -; then
              echo "‚úÖ Issue #$EXISTING_ISSUE updated successfully!"
              
              # Add comment with state change
              COMMENT="üîÑ **Pipeline State Update**  
              State: **$STATE**  
              Phase: \`$PHASE\`  
              Time: \`$TIMESTAMP\`"
              
              echo "$COMMENT" | gh issue comment "$EXISTING_ISSUE" --body-file -
              echo "üí¨ Added state update comment"
            else
              echo "‚ùå Failed to update issue"
            fi
          else
            echo "üìù Creating new pipeline state issue"
            
            # Create new issue
            if ISSUE_NUMBER=$(echo "$ISSUE_BODY" | gh issue create \
              --title "$ISSUE_TITLE" \
              --label "pipeline,automation,state-tracker" \
              --body-file - \
              --json number --jq .number); then
              echo "‚úÖ Created new issue #$ISSUE_NUMBER"
            else
              echo "‚ùå Failed to create issue"
            fi
          fi
          
      - name: Update Pipeline State Summary
        run: |
          echo "üìà UPDATING PIPELINE STATE SUMMARY"
          echo "=================================="
          
          PIPELINE_ID="${{ steps.parse-state.outputs.pipeline-id }}"
          STATE="${{ steps.parse-state.outputs.state }}"
          PHASE="${{ steps.parse-state.outputs.phase }}"
          
          # Create state summary file
          STATE_FILE=".github/pipeline-states.json"
          TIMESTAMP=$(date -Iseconds)
          
          # Initialize or update state file
          if [[ ! -f "$STATE_FILE" ]]; then
            echo "{}" > "$STATE_FILE"
          fi
          
          # Update pipeline state in JSON
          UPDATED_JSON=$(jq \
            --arg pipeline_id "$PIPELINE_ID" \
            --arg state "$STATE" \
            --arg phase "$PHASE" \
            --arg timestamp "$TIMESTAMP" \
            --arg run_id "${{ github.run_id }}" \
            '.[$pipeline_id] = {
              state: $state,
              phase: $phase, 
              timestamp: $timestamp,
              run_id: $run_id
            }' \
            "$STATE_FILE"
          )
          
          echo "$UPDATED_JSON" > "$STATE_FILE"
          
          echo "üìÑ Updated pipeline states:"
          cat "$STATE_FILE" | jq .
          
          # Commit state file if in a repository
          if git status >/dev/null 2>&1; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            
            if git add "$STATE_FILE" && git commit -m "Update pipeline state: $PIPELINE_ID ‚Üí $STATE"; then
              echo "‚úÖ Pipeline state committed to repository"
            else
              echo "‚ÑπÔ∏è  No state changes to commit"
            fi
          fi
          
      - name: Generate State Report
        run: |
          echo "üìä PIPELINE STATE REPORT"
          echo "======================="
          
          PIPELINE_ID="${{ steps.parse-state.outputs.pipeline-id }}"
          STATE="${{ steps.parse-state.outputs.state }}"
          PHASE="${{ steps.parse-state.outputs.phase }}"
          
          echo ""
          echo "üéØ Current Pipeline Status:"
          echo "  üìã Pipeline ID: $PIPELINE_ID"
          echo "  üîÑ State: $STATE"
          echo "  üìç Phase: $PHASE"
          echo "  üïê Timestamp: $(date -Iseconds)"
          echo "  üîó Run ID: ${{ github.run_id }}"
          echo ""
          
          echo "‚úÖ State tracking complete!"
          echo ""
          echo "üìã Actions taken:"
          echo "  ‚úÖ Updated GitHub commit status"  
          echo "  ‚úÖ Created/updated pipeline issue"
          echo "  ‚úÖ Updated state summary file"
          echo "  ‚úÖ Generated state report"
          echo ""
          
          echo "üîó View pipeline status:"
          echo "  üìä Commit Status: Visible on commit/PR"
          echo "  üìã Issues: https://github.com/${{ github.repository }}/issues"
          echo "  üìÅ State File: .github/pipeline-states.json"
          echo ""
          
          echo "üéâ Pipeline State Tracking Complete!"