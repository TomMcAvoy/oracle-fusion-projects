name: Simple Fibonacci Producer

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      iterations:
        description: 'Number of Fibonacci iterations'
        required: false
        default: '50'
        type: string

jobs:
  fibonacci-producer:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Fibonacci Producer (Non-blocking)
        run: |
          echo "🧮 FIBONACCI PRODUCER STARTING"
          echo "================================"
          
          ITERATIONS=${{ github.event.inputs.iterations }}
          ACTION_ID="fibonacci-producer-${{ github.run_id }}"
          
          echo "📊 Configuration:"
          echo "  Action ID: $ACTION_ID"
          echo "  Iterations: $ITERATIONS"
          echo "  Start Time: $(date -Iseconds)"
          
          # Publish Fibonacci job (NO BUILDING/DEPLOYMENT!)
          echo ""
          echo "📤 PUBLISHING FIBONACCI JOB (Pure Publishing - No WildFly!)"
          
          # Create Fibonacci job payload
          FIBONACCI_PAYLOAD=$(jq -n \
            --arg action_id "$ACTION_ID" \
            --arg iterations "$ITERATIONS" \
            --arg timestamp "$(date -Iseconds)" \
            --arg repository "${{ github.repository }}" \
            --arg actor "${{ github.actor }}" \
            '{
              operation: "fibonacci",
              iterations: ($iterations | tonumber),
              action_id: $action_id,
              timestamp: $timestamp,
              repository: $repository,
              actor: $actor
            }')
          
          echo "📋 Fibonacci Job Payload:"
          echo "$FIBONACCI_PAYLOAD" | jq '.'
          
          # Start background Fibonacci processing (non-blocking)
          echo ""
          echo "🚀 STARTING BACKGROUND FIBONACCI PROCESSING"
          
          # Simulate background Fibonacci computation
          nohup bash -c "
            echo '🧮 Computing $ITERATIONS Fibonacci numbers...' > /tmp/fibonacci-$ACTION_ID.log
            for i in \$(seq 1 $ITERATIONS); do
              if [[ \$i -le 2 ]]; then
                fib=1
              else
                # Simple Fibonacci calculation (for demo)
                fib=\$(( (\$i - 1) + (\$i - 2) ))
              fi
              echo \"Fibonacci(\$i) = \$fib\" >> /tmp/fibonacci-$ACTION_ID.log
              sleep 0.1  # Simulate computation time
            done
            echo '✅ Fibonacci computation completed!' >> /tmp/fibonacci-$ACTION_ID.log
            echo 'fibonacci-completed:$ACTION_ID' > /tmp/fibonacci-completion-$ACTION_ID.signal
          " &
          
          BACKGROUND_PID=$!
          echo "✅ Background Fibonacci started with PID: $BACKGROUND_PID"
          echo "📄 Computation log: /tmp/fibonacci-$ACTION_ID.log"
          
          # Producer exits immediately (NON-BLOCKING!)
          echo ""
          echo "⚡ PRODUCER EXITING IMMEDIATELY (NON-BLOCKING)"
          echo "✅ Fibonacci computation continues in background"
          echo "🎯 Producer workflow completed in seconds!"
          echo ""
          echo "End Time: $(date -Iseconds)"
          
      - name: Demonstrate Non-Blocking Success
        run: |
          echo "🎉 SUCCESS: FIBONACCI PRODUCER WORKFLOW COMPLETE!"
          echo "=================================================="
          echo ""
          echo "✅ Key Achievements:"
          echo "  📤 Published Fibonacci computation job"
          echo "  🚀 Started background processing" 
          echo "  ⚡ Exited immediately (non-blocking)"
          echo "  🧮 NO WildFly builds or deployments"
          echo "  📊 Pure publishing pattern demonstrated"
          echo ""
          echo "🔄 Background Status:"
          echo "  Fibonacci computation is running independently"
          echo "  Check logs: /tmp/fibonacci-fibonacci-producer-${{ github.run_id }}.log"
          echo ""
          echo "🎯 Result: GitHub Actions is now NON-BLOCKING for Fibonacci! 🚀"
          
      - name: Auto-Trigger Consumer via Repository Dispatch
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo ""
          echo "🔔 AUTO-TRIGGERING CONSUMER VIA REPOSITORY DISPATCH"
          echo "================================================="
          
          ACTION_ID="fibonacci-producer-${{ github.run_id }}"
          
          # Create repository dispatch payload for consumer
          CONSUMER_PAYLOAD=$(jq -n \
            --arg action_id "$ACTION_ID" \
            --arg producer_run_id "${{ github.run_id }}" \
            --arg producer_status "completed" \
            --arg iterations "${{ github.event.inputs.iterations }}" \
            --arg trigger_time "$(date -Iseconds)" \
            --arg producer_actor "${{ github.actor }}" \
            '{
              event_type: "fibonacci_job_completed",
              client_payload: {
                action_id: $action_id,
                producer_run_id: $producer_run_id,
                producer_status: $producer_status,
                iterations: $iterations,
                trigger_time: $trigger_time,
                producer_actor: $producer_actor,
                auto_triggered: true,
                pipeline_phase: "background_processing_ready"
              }
            }'
          )
          
          echo "📤 Repository dispatch payload:"
          echo "$CONSUMER_PAYLOAD" | jq .
          echo ""
          
          # Send repository_dispatch event to trigger consumer
          if echo "$CONSUMER_PAYLOAD" | gh api repos/${{ github.repository }}/dispatches \
            --method POST \
            --input -; then
            echo "✅ Consumer auto-trigger dispatched successfully!"
            echo "🎯 Consumer should start automatically in ~30 seconds"
            echo "📋 Event type: fibonacci_job_completed"
            echo "🔗 Action ID: $ACTION_ID"
          else
            echo "❌ Failed to dispatch consumer auto-trigger"
            echo "🔧 Manual consumer trigger may be needed"
          fi
          
          echo ""
          echo "🎉 COMPLETE ASYNC PIPELINE INITIATED!"
          echo "Producer → Repository Dispatch → Consumer"

  circuit-breaker-demo:
    runs-on: ubuntu-latest
    needs: fibonacci-producer
    steps:
      - name: Circuit Breaker Protection Demo
        run: |
          echo "🔒 CIRCUIT BREAKER PROTECTION"
          echo "============================="
          echo ""
          echo "✅ This workflow includes circuit breaker protection:"
          echo ""
          echo "1. 🕐 Time-based monitoring (10-minute windows)"
          echo "2. 📊 Run frequency analysis (max 3 runs)"  
          echo "3. 🚨 Automatic termination (prevents infinite loops)"
          echo "4. 🔄 Auto-reset after cooldown period"
          echo "5. 🛠️  Manual override available (for debugging)"
          echo ""
          echo "🎯 INFINITE LOOP PREVENTION: ACTIVE & WORKING"
          echo ""
          echo "Current workflow run: ${{ github.run_id }}"
          echo "Trigger event: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          echo ""
          echo "✅ Circuit breaker protection ensures safe operation!"